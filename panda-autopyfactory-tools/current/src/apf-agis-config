#!/usr/bin/env python 

"""
Output a factory config file only outputs ACTIVE sites
"""

import logging
import sys

from ConfigParser import SafeConfigParser
from optparse import OptionParser
from urllib import urlopen

try:
    import json as json
except ImportError, err:
    import simplejson as json




defaultsection = """\

[DEFAULT]

vo = ATLAS
status = online
override = True
enabled = True

cleanlogs.keepdays = 7

# plugins
batchstatusplugin = Condor
wmsstatusplugin = Panda
schedplugin = Ready
monitorsection = apfmon-lancaster

schedplugin = Ready, StatusTest, MaxToRun, MinPerCycle, MaxPerCycle, MaxPending, StatusOffline
sched.statustest.allowed = True
sched.statustest.pilots = 1
sched.statusoffline.allowed = True
sched.minpercycle.minimum = 0
sched.maxpending.maximum = 25

sched.maxtorun.maximum = 9999 
sched.maxpercycle.maximum = 25

executable = /data/atlpan/libexec/runpilot3-wrapper-oct02.sh
executable.defaultarguments = -s %(wmsqueue)s -h %(batchqueue)s -p 25443 -w https://pandaserver.cern.ch -j false

hold = periodic_hold = JobStatus==1 && gridjobstatus=?=UNDEFINED && CurrentTime-EnteredCurrentStatus>3600
remove = periodic_remove = (JobStatus == 5 && (CurrentTime - EnteredCurrentStatus) > 3600) || (JobStatus == 1 && globusstatus =!= 1 && (CurrentTime - EnteredCurrentStatus) > 86400)

apfqueue.sleep = 300

"""

class agis(object):
    def __init__(self):
        pass

    def parseinputs(self):
    
        parser = OptionParser(usage='''%prog [OPTIONS]
    Output a factory queue configuration using ACTIVE sites from the
    specified cloud and activity type.
    ''')
    
        parser.add_option("--vo",
                          dest="vo",
                          action="store",
                          default='ATLAS',
                          type="string",
                          help="VO name")
    
        parser.add_option("--cloud",
                          dest="cloud",
                          action="store",
                          default='ALL',
                          type="string",
                          help="name of cloud")
    
        parser.add_option("--activity",
                          dest="activity",
                          default="analysis",
                          action="store",
                          type="choice",
                          choices=['analysis','production'],
                          help="activity filter ('analysis' [default] or 'production')")
    
        parser.add_option("--site",
                          dest="site",
                          action="store",
                          default='ALL',
                          type="string",
                          help="ATLAS sitename")
    
    
        parser.add_option("--pandaresource",
                          dest="pandaresource",
                          action="store",
                          default='ALL',
                          type="string",
                          help="AGIS panda_resource")
    
        parser.add_option("--gatekeeper",
                          dest="gatekeeper",
                          action="store",
                          default='ALL',
                          type="string",
                          help="AGIS ce_name (or maybe the ce_endpoint ??? )")
    
        parser.add_option("--quiet",
                          dest="loglevel",
                          default=logging.WARNING,
                          action="store_const",
                          const=logging.WARNING,
                          help="Set logging level to WARNING [default]")
    
        parser.add_option("--info",
                          dest="loglevel",
                          default=logging.WARNING,
                          action="store_const",
                          const=logging.INFO,
                          help="Set logging level to INFO [default WARNING]")
    
        (self.options, args) = parser.parse_args()
    
    def setuplogging(self):
    
        logger = logging.getLogger()
        logger.setLevel(self.options.loglevel)
        fmt = '[APF:%(levelname)s %(asctime)s] %(message)s'
        formatter = logging.Formatter(fmt, '%T')
        handler = logging.StreamHandler(sys.stdout)
        handler.setFormatter(formatter)
        logger.handlers = []
        logger.addHandler(handler)
        
        msg = 'Cloud: %s' % self.options.cloud.upper()
        logging.info(msg)
        msg = 'Activity: %s' % self.options.activity
        logging.info(msg)

    def downloadinfo(self):

        url = 'http://atlas-agis-api.cern.ch/request/pandaqueue/query/list/?json&preset=schedconf.all'
        if self.options.cloud.upper() != 'ALL':
            url += '&cloud=%s' % self.options.cloud.upper()
        logging.info(url)
    
        handle = urlopen(url)
        self.d = json.load(handle, 'utf-8')
        handle.close()
    
    def generateconfig(self):

        print "# auto-generated by: apf-agis-config  %s" % ' '.join(sys.argv[1:])
    
        print defaultsection
        
        for key in sorted(self.d):
            try:
                if self.d[key]['resource_type'] != 'GRID':
                    print
                    print "# Excluded: %s/%s resource_type = %s" % (self.d[key]['site'], key, self.d[key]['resource_type'])
                    continue
                if self.d[key]['vo_name'] != 'atlas':
                    print
                    print "# NOT ATLAS: %s" % key
                    continue
                if self.d[key]['site_state'] == 'ACTIVE' and self.d[key]['type'] == self.options.activity:
    
                    wmsqueue = self.d[key]['panda_resource']
                    cetype = self.d[key]['type']
                    memory = self.d[key]['memory']
                    corecount = self.d[key]['corecount']
                    
                    for q in self.d[key]['queues']:
                        if q['ce_state'] != 'ACTIVE':
                            print
                            print "# CE not active: %s (%s)" % (q['ce_name'], q['ce_state'])
                            continue
                        gramqueue = None 
                        nordugridrsl = None 
                        submitplugin = None
                        submitpluginstring = None
                        gramqueue = None
                        gramversion = None
                        creamenv = None
                        creamattr = None
                
                        if q['ce_flavour'] == 'LCG-CE' or q['ce_flavour'] == 'GLOBUS':
                
                            gridresource = '%s/jobmanager-%s' %(q['ce_endpoint'], q['ce_jobmanager'])
                            if q['ce_version'] == 'GT2':
                                submitplugin = 'CondorGT2'
                                submitpluginstring = 'condorgt2'
                                gramversion = 'gram2'
                            if q['ce_version'] == 'GT5':
                                submitplugin = 'CondorGT5'
                                submitpluginstring = 'condorgt5'
                                gramversion = 'gram5'
                            if q['ce_queue_name']:
                                gramqueue = q['ce_queue_name']

                            print 'globusrsl.%s.queue = %s' % (gramversion, gramqueue)
                
                        elif q['ce_flavour'] == 'CREAM-CE':
                            gridresource = '%s/ce-cream/services/CREAM2 %s %s' %(q['ce_endpoint'], q['ce_jobmanager'], q['ce_queue_name'])
                            submitplugin = 'CondorCREAM'
                            submitpluginstring = 'condorcream'
                            #creamenv = 'APF_PYTHON26=1 RUCIO_ACCOUNT=pilot'
                            creamenv = 'RUCIO_ACCOUNT=pilot'
                            if corecount:
                                creamattr = 'CpuNumber = %d' % corecount

                            if creamenv:
                                print 'batchsubmit.condorcream.environ = %s' % creamenv

                            if wmsqueue == 'NIKHEF-ELPROD_LONG':
                                print 'batchsubmit.condorcream.condor_attributes = %(hold)s,%(remove)s,cream_attributes = CERequirements = "other.GlueCEPolicyMaxCPUTime >= 2520"'

                            if creamattr:
                                print 'creamattr = %s' % creamattr
                                print 'batchsubmit.condorcream.condor_attributes = %(hold)s,%(remove)s,cream_attributes = %(creamattr)s'
                            else:
                                print 'batchsubmit.condorcream.condor_attributes = %(hold)s,%(remove)s'

                            
                        elif q['ce_flavour'] == 'ARC-CE':
                            # ignore :port part
                            gridresource = q['ce_endpoint'].split(':')[0]
                            submitplugin = 'CondorNordugrid'
                            submitpluginstring = 'condornordugrid'
                            nordugridrsl = '(jobname = arc_pilot)'
                            rsladd = '(runtimeenvironment = APPS/HEP/ATLAS-SITE-LCG)(runtimeenvironment = ENV/PROXY)'
                            rsladd += '(jobname = arc_pilot)(memory = %d)' % memory
                            if corecount:
                                rsladd += '(count = %d)' % corecount

                            print 'batchsubmit.condornordugrid.nordugridrsl = %s' % nordugridrsl
                            print 'nordugridrsl.nordugridrsladd = %s' % rsladd
                            print 'nordugridrsl.queue = %s' % q['ce_queue_name']
                            print 'nordugridrsl.addenv.RUCIO_ACCOUNT = pilot'
                            print 'nordugridrsl.addenv.APF_PYTHON26 = 1'

                        else:
                            print
                            print "# Unknown ce_flavour (%s) for %s (%s)" % (q['ce_flavour'], q['ce_name'], q['ce_queue_id'])
                            continue
                
                        print
                        print '[%s-%s]' % (self.d[key]['nickname'], q['ce_queue_id'])
                        print 'batchqueue = %s' % key
                        print 'wmsqueue = %s' % wmsqueue
                        print 'batchsubmitplugin = %s' % submitplugin
                        print 'batchsubmit.%s.gridresource = %s' % (submitpluginstring, gridresource)

                        if cetype == 'analysis':
                            print 'batchsubmit.%s.proxy = atlas-analysis' % submitpluginstring
                            print 'executable.arguments = %(executable.defaultarguments)s -u user'
                        elif cetype == 'production':
                            print 'batchsubmit.%s.proxy = atlas-production' % submitpluginstring
                            print 'executable.arguments = %(executable.defaultarguments)s'
    
    
            except KeyError, e:
              print '# Key error: %s' % e
              print


def main():
    agisobj = agis()
    agisobj.parseinputs()
    agisobj.setuplogging()
    agisobj.downloadinfo()
    agisobj.generateconfig()

if __name__ == "__main__":
    sys.exit(main())
