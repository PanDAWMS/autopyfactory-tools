#!/bin/env python

import subprocess
import time

import htcondor



class Query(object):
    """
    This is the class that implements the HTCondor query.
    It just does that, it does not interpret the output of the query,
    for each line in the output, it creates an object of class Slot() 
    and feed it with that line. 
    The object Slot( ) is supposed to know how to interpret and manipulate
    the content of the output of the HTCondor query.
    """

    def __init__(self):

        # this is the list of HTCondor startd's ClassAds to query 
        self.query_attributes = ['Name', 
                                 'SlotID', 
                                 'State', 
                                 'Activity', 
                                 'NodeType', 
                                 'LoadAvg', 
                                 'RemoteGroup', 
                                 'EC2InstanceID', 
                                 'EC2PublicDNS', 
                                 'EC2AMIID', 
                                 'SlotType']

        self.container = Container()

    def run(self):

        self._query()
        self._store()


    def _query(self):

    collector_name = htcondor.param.get('COLLECTOR_HOST')
    collector = htcondor.Collector(collector_name)
        self.out = collector.query(htcondor.AdTypes.Startd, "true", self.query_attributes)


    def _store(self):
        
        for slot_classad in self.out:
            new_slot = Slot(slot_classad, self)
            self.container.add(new_slot)


    def get(self):
        self.container.sort()
        return self.container.get()


class UI(object):
    """
    this class just implements a method to print out to the stdout 
    the final results

    It simply gets the output of the query, after being interpreted and 
    manipulated, by calling method get( )
    This class does not implement method get( ), 
    so get( ) it is supposed to be implemented in a different class XYZ,
    and everything being used by a child class:

        class Child(XYZ, UI)

    therefore, class Child will have available methods from this class UI
    and from class XYZ that implements get( ), among other things.
    """

    def display(self):
        """
        this is the method that prints out to stdout the results
        of the query.

        We first call get( ), which is implemented in a different class.
        The output of get MUST be a list of lists.
        We calculate, the maximum lenght for each field 
        -in other words, each item at position i for each list-.
        Then we just double loop over the list of lists, 
        print each field, and the needed number of white spaces to 
        reach the maximum previously calculated for that field.
        That way, all fields are always displayed well aligned. 
        """

    out = self.get()

        if len(out) == 0:
            return ""
        
        # if there is actual content in out...
        maxs = self._calculate_max(out)
        self._display(out, maxs)
 

    def _calculate_max(self, out):

        maxs = []
        for i in range(len(out[0])):
            # max length for field i on every line in out:
            max_i = max(len(obj[i]) for obj in out)
            maxs.append(max_i)
        return maxs


    def _display(self, out, maxs):

        for line in out:
            s = ""
            for i in range(len(line)):
                s += "%s  " %line[i]
                s += " " * (maxs[i] - len(line[i]) )
            print s


class Slot(object):
    """
    This is the class to handle each Slot.
    Therefore, this is the class that knows how to interpret and manipulate
    the output of the query done in class Query( )
    """

    def __init__(self, slot_classad, query):
        """
        slot_classad is each one of the objects returned by collector.query() method
        query is a "pointer" to the class Query that creates all Slot() objects
    We use a reference to Query( ) class 
        because it contains a list of the classad attributes
        being used in the query, 
        which is the list of attributes in the slot_classad input variable,
        so we know what is each field in slot_classad
        """

        self.query = query
        self.slot_classad = slot_classad

        # this is the list of attributes, or fields,  
        # we want to display in the output
        self.list_attr = ['name',
                          'slotid',
                          'state',
                          'activity',
                          'nodetype',
                          'loadavg',
                          'remotegroup',
                          'ec2instanceid',
                          'ec2publicdns',
                          'ec2amiid']

  
        self._create_attributes()
        self._parseattributes()


    def _create_attributes(self):
        """ 
        add a class attribute for each item in list_attributes
        the name of the class attribute is just the lower case version of the value in list_attributes
        For example:

              self.name = self.slot_classad['Name']
              self.slotid = self.slot_classad['SlotID']
              self.state = self.slot_classad['State']
              self.activity = self.slot_classad['Activity']
              self.nodetype = self.slot_classad['NodeType']
              self.loadavg = self.slot_classad['LoadAvg']
              self.remotegroup = self.slot_classad['RemoteGroup']
              self.ec2instanceid = self.slot_classad['EC2InstanceID']
              self.ec2publicdns = self.slot_classad['EC2PublicDNS']
              self.ec2amiid = self.slot_classad['EC2AMIID']
              self.slottype = self.slot_classad['SlotType']
              ...

        This can be done also with a dictionary,
        like self.dict_attr[ key ] = value
        but then the rest of the code is filled with stuff like
 
           self.dict_attr[key] 

        instead of

           self.key

        Using class attributes seems to be a little bit cleaner.
        That is the only reason to do it this way.

        If some of the fields was not included in the query output,
        we give string "undefined" to it. 
        We do that, because we want all fields always to have a content,
        so when they are displayed, all columns exists.
        """ 
        
        for att in self.query.query_attributes:
            setattr(self, att.lower(), self.slot_classad.get(att, "undefined" ))

    
    def _parseattributes(self):
        """
        in this method we manipulate the content 
        of the slot_classad input variables
        to build the final output with the format we want
        """

        self.slotid = str(self.slotid)
        self.loadavg = str(self.loadavg)

        (slot, machine) = self.name.split("@")
        self.name = '%s:%s' %(machine, slot)
        if self.slottype == 'Dynamic':
            self.name = '      %s' %self.name


    def __cmp__(self, other):
        """
        for the time being, we just leave things as they are
        """
        return 1


    def get(self):
        return [getattr(self,att) for att in self.list_attr]
        

class Container(object):
    """
    This class is just a container of objects.
    It is actually a completely abstract class
    so it can handle any kind of objects.
    """

    def __init__(self):

        self.objs = []


    def add(self, obj):

        obj.container = self
        self.objs.append(obj)


    def sort(self):
        """
        For this method to work, 
        the objects being stored are expected
        to have a method __cmp__( ) implemented
        """
        self.objs.sort()


    def get(self):
        out = []
        for obj in self.objs:
           out.append(obj.get())
        return out


class QueryUI(Query, UI):
    """
    this class just put together
    the class Query( ), which runs the queries
    and manage the output, 
    and class UI( ), which knows how to print out
    that content to the stdout
    """
    pass
    # FIXME ??? do I need to do something here ???


if __name__ == '__main__':

    queryui = QueryUI()
    queryui.run()
    queryui.display()


