#!/bin/env python
#
# Long format condor_status with information relevant to APF admins
#

import subprocess

class CondorSlot(object):

    def __init__(self, name, slotid, activity, nodetype, loadavg, remotegroup, ec2instanceid, ec2publicdns):
        

        (self.slot, self.machine) = name.split("@")
        self.slotid = slotid
        self.activity = activity
        self.nodetype = nodetype
        self.loadavg = loadavg
        self.remotegroup = remotegroup
        self.ec2instanceid = ec2instanceid
        self.ec2publicdns = ec2publicdns

    def __str__(self):
        s=''
        s+='%s' % self.machine
        s+=':%s ' % self.slot
        s+=' %s ' % self.slotid
        s+=' %s ' % self.activity
        s+=' %s ' % self.nodetype
        s+=' %s ' % self.loadavg
        s+=' %s ' % self.remotegroup
        s+=' %s ' % self.ec2instanceid
        s+=' %s ' % self.ec2publicdns
        return s


cmd = 'condor_status -autoformat Name SlotID Activity NodeType LoadAvg RemoteGroup EC2InstanceID EC2PublicDNS'
print("Invoking command: '%s'"% cmd)

p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)     
(out, err) = p.communicate()
out=out.strip()
#print("OUT=%s" % out)

slotobjs = []

lines = out.split('\n')
for line in lines:
    (name, slotid, activity, nodetype, loadavg, remotegroup, ec2instanceid, ec2publicdns) = line.split()
    so = CondorSlot(name, slotid, activity, nodetype, loadavg, remotegroup, ec2instanceid, ec2publicdns )
    slotobjs.append(so)
#print(lines)


for o in slotobjs:
    if o.slot == "slot1":
        print("%s " % o)
        for x in slotobjs:
           if x.machine == o.machine and x.slot != "slot1":
                print("       %s " % x)



