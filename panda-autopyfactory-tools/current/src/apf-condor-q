#!/bin/env python

import subprocess
import time


class Job(object):
    def __init__(self, line):
        """
        example of line:
            88705.4 autopyfactory 1457714913 /usr/libexec/wrapper-0.9.16.sh 2 0.0 BNL_EC2W2_MCORE
        """
  
        self.jobslist = None
        
        (self.id, self.owner, self.qdate, self.cmd, self.jobstatus, self.enteredcurrentstatus, self.ec2amiid, self.match_apf_queue) = line.split()

        status_mappings = {'0': 'U', 
                           '1': 'I',
                           '2': 'R',
                           '3': 'X',
                           '4': 'C',
                           '5': 'H',
                           '6': 'E'}
        self.jobstatus = status_mappings[self.jobstatus]

        self.timecurrentstatus = float(time.time()) - float(self.enteredcurrentstatus)
        self.timecurrentstatus = int(self.timecurrentstatus)

        self.qdate = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(float(self.qdate)))

        days = self.timecurrentstatus/(24*3600)
        rest = self.timecurrentstatus - days*24*3600
        m, s = divmod(int(rest), 60)
        h, m = divmod(m, 60)
        self.enteredcurrentstatus= '%d+%02d:%02d:%02d' %(days, h, m, s)

    def __str__(self):

        s = ''
        s += '%s' %self.id
        s += ' '*(self.jobslist.maxid - len(self.id))
        s += '  %s' %self.owner
        s += ' '*(self.jobslist.maxowner -len(self.owner)) 
        s += '  %s' %self.qdate
        s += '  %s' %self.cmd
        s += ' '*(self.jobslist.maxcmd -len(self.cmd)) 
        s += '  %s' %self.jobstatus
        s += '  %s' %self.enteredcurrentstatus
        s += ' '*(self.jobslist.maxtime -len(self.enteredcurrentstatus)) 
        s += '  %s' %self.ec2amiid
        s += '  %s' %self.match_apf_queue
        s += '\n'
        return s


class JobsList(object):

    def __init__(self):

        self.jobs = []

        self.maxid = 0
        self.maxowner = 0        
        self.maxcmd = 0         
        self.maxtime = 0             

    def add(self, job):

        job.jobslist = self

        self.jobs.append(job)

        if len(job.id)                    > self.maxid    : self.maxid    = len(job.id)
        if len(job.owner)                 > self.maxowner : self.maxowner = len(job.owner)          
        if len(job.cmd)                   > self.maxcmd   : self.maxcmd   = len(job.cmd)            
        if len(job.enteredcurrentstatus)  > self.maxtime  : self.maxtime  = len(job.enteredcurrentstatus)            


    def __str__(self):

        s = ''
        for job in self.jobs:
            s += job.__str__()

        if len(s)>0:
            s = s[:-1]
  
        return s



cmd = 'condor_q -format "%s." ClusterId -format "%s " ProcId -format "%s " Owner -format "%s " QDate -format "%s " Cmd -format "%s " JobStatus -format "%s " EnteredCurrentStatus -format "%s " EC2AmiID  -format "%s\n" MATCH_APF_QUEUE'
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
(out, err) = p.communicate()
out=out.strip()


jobslist = JobsList()

lines = out.split('\n')
for line in lines:
    new_job = Job(line)
    jobslist.add(new_job)

print jobslist


